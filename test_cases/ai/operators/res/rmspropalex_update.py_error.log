[12:35:41] /home/tanjunhan/MXNet/src/storage/storage.cc:202: Using Pooled (Naive) StorageManager for CPU
Traceback (most recent call last):
  File "/home/tanjunhan/MXNet/rmspropalex_update.py", line 16, in <module>
    rmspropalex_update_res = run_performance_test(
                             ^^^^^^^^^^^^^^^^^^^^^
  File "/home/tanjunhan/MXNet/benchmark/opperf/utils/benchmark_utils.py", line 251, in run_performance_test
    benchmark_result = _run_operator_performance_test(op, inputs, run_backward, warmup, runs, kwargs_list, profiler)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/tanjunhan/MXNet/benchmark/opperf/utils/benchmark_utils.py", line 188, in _run_operator_performance_test
    _, _ = benchmark_helper_func(op, warmup, **kwargs_list[0])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/tanjunhan/MXNet/benchmark/opperf/utils/profiler_utils.py", line 200, in cpp_profile_it
    res = func(*args, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^
  File "/home/tanjunhan/MXNet/benchmark/opperf/utils/ndarray_utils.py", line 58, in nd_forward_backward_and_profile
    res = op(**kwargs_new)
          ^^^^^^^^^^^^^^^^
  File "<string>", line 115, in rmspropalex_update
  File "/home/tanjunhan/MXNet/python/mxnet/_ctypes/ndarray.py", line 76, in _imperative_invoke
    check_call(_LIB.MXImperativeInvoke(
  File "/home/tanjunhan/MXNet/python/mxnet/base.py", line 253, in check_call
    raise get_last_ffi_error()
mxnet.base.MXNetError: MXNetError: Cannot find argument 'gamma2', Possible Arguments:
----------------
lr : float, required
    Learning rate
rho : float, optional, default=0.949999988
    Decay rate.
momentum : float, optional, default=0.899999976
    Decay rate.
epsilon : float, optional, default=9.99999994e-09
    A small constant for numerical stability.
wd : float, optional, default=0
    Weight decay augments the objective function with a regularization term that penalizes large weights. The penalty scales with the square of the magnitude of each weight.
rescale_grad : float, optional, default=1
    Rescale gradient to grad = rescale_grad*grad.
clip_gradient : float, optional, default=-1
    Clip gradient to the range of [-clip_gradient, clip_gradient] If clip_gradient <= 0, gradient clipping is turned off. grad = max(min(grad, clip_gradient), -clip_gradient).
clip_weights : float, optional, default=-1
    Clip weights to the range of [-clip_weights, clip_weights] If clip_weights <= 0, weight clipping is turned off. weights = max(min(weights, clip_weights), -clip_weights).
, in operator rmspropalex_update(name="", epsilon="1e-08", wd="0.0001", lr="0.01", gamma2="0.9", gamma1="0.95")
